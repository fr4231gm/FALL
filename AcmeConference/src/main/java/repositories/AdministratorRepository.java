package repositories;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.data.jpa.repository.Query;import org.springframework.stereotype.Repository;import domain.Administrator;@Repositorypublic interface AdministratorRepository extends		JpaRepository<Administrator, Integer> {	@Query("select a from Administrator a where a.userAccount.id = ?1")	Administrator findAdministratorByUserAccountId(int userAccountId);	//RF 14 - 8.1	@Query("select min(1*(select count(s) from Submission s where s.conference.id=c.id)), max(1*(select count(s) from Submission s where s.conference.id=c.id)), floor(avg(100*(select count(s) from Submission s where s.conference.id=c.id)))/100., floor(stddev(100*(select count(s) from Submission s where s.conference.id=c.id)))/100. from Conference c")	Double[] SubmissionsPerConference();		//RF 14 - 8.2	@Query("select min(1*(select count(r) from Registration r where r.conference.id=c.id)), max(1*(select count(r) from Registration r where r.conference.id=c.id)), floor(avg(100*(select count(r) from Registration r where r.conference.id=c.id)))/100., floor(stddev(100*(select count(r) from Registration r where r.conference.id=c.id)))/100. from Conference c")	Double[] RegistrationsPerConference();		//RF 14 - 8.3	@Query("select floor(10000*min(c.fee))/100., floor(10000*max(c.fee))/100., floor(10000*avg(c.fee))/100., floor(10000*stddev(c.fee))/100. from Conference c")	Double[] ConferencesFeesStats();		//RF 14 - 8.4	@Query("select min(datediff(c.endDate, c.startDate)) , max(datediff(c.endDate, c.startDate)), floor(100*avg(datediff(c.endDate, c.startDate)))/100, floor(100*stddev(datediff(c.endDate, c.startDate)))/100 from Conference c")	Double[] ConferencesDaysStats();		//RF 25 - 2.1	@Query("select min(1*(select count(c1) from Conference c1 where c1.category.id=c2.id)), max(1*(select count(c1) from Conference c1 where c1.category.id=c2.id)), floor(avg(100*(select count(c1) from Conference c1 where c1.category.id=c2.id)))/100., floor(stddev(100*(select count(c1) from Conference c1 where c1.category.id=c2.id)))/100. from Category c2")	Double[] ConferencesPerCategory();		//RF 25 - 2.2	@Query("select min(c.comments.size), max(c.comments.size), floor(100*avg(c.comments.size))/100., floor(100*stddev(c.comments.size))/100. from Conference c")	Double[] CommentsPerConference();		//RF 25 - 2.3	@Query("select min(a.comments.size), max(a.comments.size), floor(100*avg(a.comments.size))/100., floor(100*stddev(a.comments.size))/100. from Activity a")	Double[] CommentsPerActivity();}